/*
IoTCloud_Example.ino
This example combines the functionality of Minimal.ino and ArgumentHandling.ino.
Assuming your cloud variable is named commandString, and set to READ/WRITE.
onCommandStringChange() is the function automatically generated by Arduino Cloud
from setting the commandString variable to READ/WRITE.
For best results, set the cloud variable to update on change.
As is, this will only compile in the Cloud Editor.
*/
#include <CommandHandler_IoTCloud.h>

CommandHandler handler(5, 5);  // 5 commands, up to 5 args

// Echo command
String echoCommand(const String* args, size_t argCount) {
  String response;
  for (size_t i = 0; i < argCount; i++) {
    response += args[i] + " ";
  }
  return response;
}

// Multiply command
String multiplyCommand(const String* args, size_t argCount) {
  int a = args[0].toInt();
  int b = args[1].toInt();
  return "Result: " + String(a * b);
}

void setup() {
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  // Register echo command
  handler.registerCommand("echo", echoCommand, "Repeats the given arguments.", 1, 5, nullptr, 0);

  // Register multiply command with argument types
  CommandHandler::ArgType multiplyArgs[] = {CommandHandler::INT, CommandHandler::INT};
  handler.registerCommand("multiply", multiplyCommand, "Multiplies two integers.", 2, 2, multiplyArgs, 2);
}

void loop() {
  ArduinoCloud.update();
}

/*
  Since commandString is READ_WRITE variable, onCommandStringChange() is
  executed every time a new value is received from IoT Cloud.
  This replaces the need for the loop() function in the main version.
*/
void onCommandStringChange() {
  // Check the incoming message isn't empty
  if (commandString.length() == 0) {
    return;
  }

  // Processes the received message
  String response = handler.processInput(commandString);

  // Updates the cloud variable with the output
  commandString = response;
}
